{:paths ["script"]

 :tasks
 {:requires ([dinsro.commands :refer :all])

  _8
  {:doc  "Summons bot"
   :task (eight)}

  all
  {:depends [init install]}

  await-app
  {:task (do
           (shell "docker-compose logs -f &")
           (get-docker-status "default_dinsro_1")
           (shell "docker inspect -f {{.State.Health.Status}} default_dinsro_1")
           ;; this is what bb is supposed to fix
           (shell "until [ \"`docker inspect -f {{.State.Health.Status}} default_dinsro_1`\" = \"healthy\" ] || [ \"`docker inspect -f {{.State.Health.Status}} default_dinsro_1`\" = \"exited\" ] ; do sleep 5; done"))}


  build-dev-image
  {:doc  "Build dev image"
   :task (earthly :dev-image)}

  build-image
  {:doc  "Build production image"
   :task (earthly :image {:interactive true})}

  build-production
  {:depends [compile-production package-jar]}

  ci
  {:task (earthly :ci {:interactive true
                       :privileged  true})}

  clean
  {:doc  "Clean all the things"
   :task (do
           (shell "rm -rf resources/main/public/js")
           (shell "rm -rf resources/main/public/js")
           (shell "rm -rf resources/workspaces/public/js")
           (shell "rm -rf .shadow-cljs/builds")
           (shell "rm -rf classes/*")
           (shell "rm -rf target"))}

  check
  {:doc  "Check sources are formatted correctly"
   :task (cljfmt ["src" "deps.edn" "shadow-cljs.edn"])}

  compile
  {:doc     "Compile all source files"
   :depends [compile-clj compile-cljs]}

  compile-clj
  {:doc     "Compile clojure source files"
   :depends [init]}

  compile-cljs
  {:doc     "Compile clojurescript source files"
   :depends [init]
   :task    (clojure "-M:dev:shadow-cljs compile main")}

  compile-production
  {:doc     "Compile all source files for production"
   :depends [compile-production-clj compile-production-cljs]}

  compile-production-clj
  {:doc  "Compile clojure source files for production"
   :task (do
           (shell "mkdir -p classes")
           (clojure "-M:production -e " "(compile 'dinsro.core)"))}

  compile-production-cljs
  {:doc     "Compile clojurescript source files for production"
   :depends [install]
   :task    (clojure "-M:shadow-cljs release main")}

  dev
  {:doc     "Build and start development server via docker"
   :depends [build-dev-image start-dev]}

  dev-bootstrap
  {:doc  "Start clojurescript watch and main server"
   :task (do
           (future (shell "bb watch-cljs"))
           (shell "bb run"))}

  display-path
  {:doc  "Display dependency trees for each alias"
   :task (doseq [alias ["cljfmt" "dev" "eastwood" "kibit" "production"
                        "shadow-cljs" "test" "uberdeps"]]
           (shell (str "clojure -A:" alias " -Stree")))}

  e2e
  {:doc  "Run end to end testing"
   :task (earthly :e2e {:privileged true})}

  format
  {:doc  "Format source files"
   :task (clojure "-M:cljfmt fix src deps.edn shadow-cljs.edn --indents indentation.edn")}

  init
  {:doc     "Initialize the system"
   :depends [install init-bb]}

  init-bb
  {:doc  "Initialize babashka"
   :task (clojure "-e" "(+ 1 1)")}

  install
  {:doc  "Install js dependencies"
   :task (shell "yarn install --frozen-lockfile")}

  kondo
  {:depends [lint-kondo]}

  lint
  {:depends [lint-kondo lint-eastwood lint-kibit]}

  lint-eastwood
  {:task (clojure "-M:dev:eastwood '{:source-paths [\"src/main\" \"src/test\"]}'")}

  lint-kibit
  {:task (clojure "-M:dev:kibit --paths src/main,src/test")}

  lint-kondo
  {:task (shell "npx clj-kondo --parallel --lint \"src/main:src/test\"")}

  package-jar
  {:doc  "Build production jar"
   :task (clojure "-M:uberdeps:production --main-class dinsro.core --aliases production")}

  prepare-test-dirs
  {:doc  "Build test data directory"
   :task (shell "mkdir -p /tmp/dinsro/data/test")}

  run
  {:doc  "Run server in dev mode"
   :task (clojure "-M:dev:dev-main")}

  run-production
  {:doc  "Run server from jar"
   :task (shell "DATAHIKE_URL=\"datahike:file://$(pwd)/data/dev\" java -jar target/dinsro.jar")}

  server
  {:doc     "compile and run server in dev mode"
   :depends [compile run]}

  start-dev
  {:doc     "Start development"
   :depends [start-lb start-web]}

  start-lb
  {:doc  "Run the load balancer"
   :task (shell "docker-compose up -d frontend")}

  start-web
  {:doc  "Start the main server"
   :task (shell "docker-compose up dinsro")}

  test
  {:doc     "Run all tests"
   :depends [test-clj test-cljs]}

  test-clj
  {:doc  "Run clojure tests"
   :task (clojure "-M:dev:test -d src/test")}

  test-cljs
  {:doc  "Run clojurescript tests"
   :task (do
           (clojure "-M:test:shadow-cljs compile ci")
           (shell "npx karma start --single-run --check=\"ci.js\""))}

  test-integration
  {:task (shell "cypress run")}

  watch {:depnds [watch-cljs]}

  watch-cljs
  {:depends [install]
   :task    (clojure "-M:test:dev:shadow-cljs watch main workspaces")}

  workspaces
  {:task (clojure "-M:test:dev:shadow-cljs watch workspaces")}}}
